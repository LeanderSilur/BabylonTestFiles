<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html" charset="utf-8"/>
    <title>Babylon AnimationTest</title>
    <!--- link to the last version of babylon -->
    <!-- <script src="babylon.js"></script> -->
    <script src="https://rawgit.com/BabylonJS/Babylon.js/master/dist/babylon.js"></script>
    <!--- link to the last version of babylon --->
    <!-- <script src="https://cdn.babylonjs.com/babylon.js"></script> -->
    
    <style>
        html, body {
            overflow: hidden;
            width   : 100%;
            height  : 100%;
            margin  : 0;
            padding : 0;
        }

        #renderCanvas {
            width   : 100%;
            height  : 100%;
            touch-action: none;
        }
    </style>
</head>
<body>
    <canvas id="renderCanvas"></canvas>
    <script>

//VARIABLES GLOBAL
var scene;

//Camera Setup
function SetupBabylonCamera(camera){
    camera.setPosition(new BABYLON.Vector3(0, 5,-10));
    camera.setTarget(new BABYLON.Vector3(0,2,0));                
    camera.radius = 50;
    camera.lowerRadiusLimit = 20;
    camera.upperRadiusLimit = 60;
    camera.lowerBetaLimit = 0;
    camera.upperBetaLimit = 1.5;
    camera.panningSensibility = 0;
}
function applyCustomMaterial(newMeshes, scene, texturePath){
    var materialname = "Mat" + newMeshes[1];

    console.log(newMeshes);

    var material = new BABYLON.StandardMaterial(materialname, scene);
    material.emissiveTexture = new BABYLON.Texture(texturePath, scene);
    material.diffuseColor = new BABYLON.Color3(0,0,0);
    material.specularColor = new BABYLON.Color3(0,0,0);
    material.specularPower = 0;
    material.opacityTexture = new BABYLON.Texture(texturePath, scene);

    //if (newMeshes[1].name == "41_ball_GEO_finalUVlayout_obj_1")
    //{
    //    console.log(newMeshes[1].name);
    //    material.opacityTexture = new BABYLON.Texture(texturePath, scene);
    //}

    for (var i = 0; i < newMeshes.length; i++) {
        newMeshes[i].material = material;
        newMeshes[i].applyFog = true;
        newMeshes[i].backFaceCulling = false;
        newMeshes[i].alphaIndex = Number.MAX_VALUE;
        
    }
    //material.alpha = 1 ;    

}

//When Mesh is succesfully loaded initialize Materials
function onBabylonLoad_blume(newMeshes, particleSystems, skeletons) {
    applyCustomMaterial(newMeshes,scene,"BabylonFile/texTestblume.png");
}

//When Mesh is succesfully loaded initialize Materials
function onBabylonLoad_schneehaufen(newMeshes, particleSystems, skeletons) {
    applyCustomMaterial(newMeshes,scene,"BabylonFile/BallRig_Texture_v01.png");
}


//When Mesh is succesfully loaded initialize Materials
function onBabylonLoad_unrund(newMeshes, particleSystems, skeletons) {
    applyCustomMaterial(newMeshes,scene,"BabylonFile/Unrund_default6_breiterstreifen.png");
}

// SnowParticle System
function snowParticleSystem(scene){    
    //Create Particle Emitter
    var snowPlane = BABYLON.Mesh.CreatePlane("Snowplane", 12, scene);
    snowPlane.rotation = new BABYLON.Vector3(Math.PI / 2,0,0);
    snowPlane.position = new BABYLON.Vector3(0,7,0);
    snowPlane.isVisible = false;

    // Create a particle system
    var particleSystem = new BABYLON.ParticleSystem("particles", 2000, scene);

    //Texture of each particle
    particleSystem.particleTexture = new BABYLON.Texture("textures/flare.png", scene);

    // Where the particles come from
    //particleSystem.emitter = fountain; // the starting object, the emitter
    particleSystem.emitter = snowPlane;
    particleSystem.minEmitBox = new BABYLON.Vector3(-30, -30, 0); // Starting all from
    particleSystem.maxEmitBox = new BABYLON.Vector3(30, 30, 0); // To...

    // Colors of all particles
    particleSystem.color1 = new BABYLON.Color4(0, 0, 0, 1.0);
    particleSystem.color2 = new BABYLON.Color4(0, 0, 0, 1.0);
    particleSystem.colorDead = new BABYLON.Color4(0, 0, 0.2, 0.0);

    // Size of each particle (random between...
    particleSystem.minSize = 0.05;
    particleSystem.maxSize = 0.06;

    // Life time of each particle (random between...
    particleSystem.minLifeTime = 2;
    particleSystem.maxLifeTime = 3;

    // Emission rate
    particleSystem.emitRate = 10;

    // Blend mode : BLENDMODE_ONEONE, or BLENDMODE_STANDARD
    particleSystem.blendMode = BABYLON.ParticleSystem.BLENDMODE_STANDARD;

    // Set the gravity of all particles
    particleSystem.gravity = new BABYLON.Vector3(0, -9.81, 0);

    // Direction of each particle after it has been emitted
    particleSystem.direction1 = new BABYLON.Vector3(40, 6, 3);
    particleSystem.direction2 = new BABYLON.Vector3(20, 1, -3);

    // Angular speed, in radians
    particleSystem.minAngularSpeed = 0;
    particleSystem.maxAngularSpeed = Math.PI;

    // Speed
    particleSystem.minEmitPower = 1;
    particleSystem.maxEmitPower = 3;
    particleSystem.updateSpeed = 0.005; //0.005

    // Start the particle system
    particleSystem.start();
}

function addFog(scene){

    scene.fogMode = BABYLON.Scene.FOGMODE_EXP;
    scene.fogColor = new BABYLON.Color3(0.95, 0.93, 0.98);
    scene.fogDensity = 0.02;

}

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
function getRandomArbitrary(min, max) {
    return Math.random() * (max - min) + min;
}
function getRandomVector3(minx, maxx, miny, maxy, minz, maxz){
    var x = getRandomArbitrary(minx, maxx);
    var y = getRandomArbitrary(miny, maxy);
    var z = getRandomArbitrary(minz, maxz);
    var vec = new BABYLON.Vector3(x, y, z);
    return vec;
}
function getRandomScalar(min, max){
    var x = getRandomArbitrary(min, max);
    var vec = new BABYLON.Vector3(x, x, x);
    return vec;
}

function testboxArray(scene,count,size,distance){

    for (var i=0; i<=count; i++) {
        //console.log(i);
        name = "box" +i;
        material = name + "Material";
        //console.log(name);
        var name = BABYLON.Mesh.CreateBox(name, size, scene, false, BABYLON.Mesh.DEFAULTSIDE);
        name.position.x = i*distance; //3
    }
}

//sehr sehr clever gebaut arun !!!
function onDistributeGras(newMeshes, particleSystems, skeletons) {
    var materialBlume = new BABYLON.StandardMaterial("texBlume", scene);
    materialBlume.emissiveTexture = new BABYLON.Texture("BabylonFile/texTestblume.png", scene);
    materialBlume.diffuseColor = new BABYLON.Color3(0,0,0);
    materialBlume.specularColor = new BABYLON.Color3(0,0,0);
    materialBlume.specularPower = 0;
    materialBlume.opacityTexture = new BABYLON.Texture("BabylonFile/texTestblume.png", scene);
    newMeshes[1].material = materialBlume;
    newMeshes[2].material = materialBlume;
    var index = 0;

    for (var a = 0; a < 0; a++) {
        var no_of_stiels = getRandomInt(1, 5);
        var minPos = -160;
        var maxPos = 160;
        var pos = getRandomVector3(minPos, maxPos, 0, 0, minPos, maxPos);

        var newGround = newMeshes[1].createInstance("index: " + a);
        newGround.position = pos;
        newGround.applyFog = true;

        for (var i= 0; i< no_of_stiels; ++i) {
            var newInstance = newMeshes[2].createInstance("index: " + index);
            index+=1;
            var vec = getRandomVector3(-0.6, 0.6, 0, 0, -0.6, 0.6);
            newInstance.position = pos.add(vec);
            newInstance.rotation.y = getRandomArbitrary(0, Math.PI);
            newInstance.scaling = getRandomScalar(0.3, 1.0);
            newInstance.applyFog = true;
        }
    }

    newMeshes[1].isVisible = false;
    newMeshes[2].isVisible = false;

}
function highEndGras(scene){

    BABYLON.SceneLoader.ImportMesh("", "BabylonFile/", "gras_single.babylon", scene, onDistributeGras);
}


window.addEventListener('DOMContentLoaded', function(){

    // get the canvas DOM element
    var canvas = document.getElementById('renderCanvas');
    
    var engine = new BABYLON.Engine(canvas, true); //false: antialising turned off
    scene = new BABYLON.Scene(engine);

    // Camera
    var camera = new BABYLON.ArcRotateCamera("ArcRotateCamera", 0, 0, 0, BABYLON.Vector3.Zero(), scene);
    camera.attachControl(canvas, false);

    SetupBabylonCamera(camera);

    // Groundplane
    var ground = BABYLON.Mesh.CreatePlane("ground", 500.0, scene);
    ground.position = new BABYLON.Vector3(0,-0.01, 0);
    ground.rotation = new BABYLON.Vector3(Math.PI / 2, 0, 0);

    ground.material = new BABYLON.StandardMaterial("groundMat", scene);
    ground.material.backFaceCulling = false;
    ground.material.emissiveColor = new BABYLON.Color3(1,1,1);
    ground.material.diffuseColor = new BABYLON.Color3(0,0,0);
    ground.material.specularColor = new BABYLON.Color3(0,0,0);
    ground.material.specularPower = 0;

    // Skybox
    var skybox = new BABYLON.Mesh.CreateBox( "skybox", 700, scene);
    var skyboxMaterial = new BABYLON.StandardMaterial("skyboxMaterial", scene);
    skybox.material = skyboxMaterial;
    skyboxMaterial.backFaceCulling = false;
    skyboxMaterial.emissiveColor = new BABYLON.Color3(1,1,1);
    skyboxMaterial.diffuseColor = new BABYLON.Color3(1,1,1);
    skyboxMaterial.specularColor = new BABYLON.Color3(0,0,0);
    skyboxMaterial.specularPower = 0;

    // create a basic light, aiming 0,1,0 - meaning, to the sky
    //var light = new BABYLON.HemisphericLight('light1', new BABYLON.Vector3(0,1,0), scene);

    
highEndGras(scene);
    
    // The first parameter can be used to specify which mesh to import. Here we import all meshes
    BABYLON.SceneLoader.ImportMesh("", "BabylonFile/", "blume_Loop.babylon", scene, onBabylonLoad_blume);
    //BABYLON.SceneLoader.ImportMesh("", "BabylonFile/", "patch.babylon", scene, onBabylonLoad);
    BABYLON.SceneLoader.ImportMesh("", "BabylonFile/", "unrund_v35_test.babylon", scene, onBabylonLoad_unrund);
    BABYLON.SceneLoader.ImportMesh("", "BabylonFile/", "gras.babylon", scene, onBabylonLoad_blume);
    BABYLON.SceneLoader.ImportMesh("", "BabylonFile/", "schneehaufen.babylon", scene, onBabylonLoad_schneehaufen); 
    //Create Fog
    addFog(scene);

    //Create Snow
    snowParticleSystem(scene);


    // random control box
    //var box = BABYLON.Mesh.CreateBox("box", 1.0, scene, false, BABYLON.Mesh.DEFAULTSIDE);
    //box.position.x = 3;
    var boxMaterial = new BABYLON.StandardMaterial("BoxMaterial", scene);
    boxMaterial.emissiveColor = new BABYLON.Color3(0.5,0.5,0.5);
    boxMaterial.diffuseColor = new BABYLON.Color3(1,1,1);
    boxMaterial.specularColor = new BABYLON.Color3(0,0,0);


    // array of boxes for fog testing
    //testboxArray(scene,20,1,3);
    
    // run the render loop
    engine.runRenderLoop(function(){
        scene.render();
    });


    // the canvas/window resize event handler
    window.addEventListener('resize', function(){
        engine.resize();
    });
});

    </script>
</body>
</html>
